@mixin _iota-generate-spacing-classes($sizes, $suffix, $props...) {
  $spacing-responsive   : nth($props, 11);
  $spacing-breakpoints  : nth($props, 12);

  @if (_iota-is-number($sizes) == true) {
    @include _iota-spacing-property($sizes, $suffix, $props...);

    @if ($spacing-responsive == true) {
      @each $breakpoint-name, $breakpoint-size in $spacing-breakpoints {
        @media #{$breakpoint-size} {
          $breakpoint-suffix: if($suffix, $suffix, '') + _iota-cast-breakpoint($breakpoint-name);
          @include _iota-spacing-property($sizes, $breakpoint-suffix, $props...);
        }
      }
    }
  }

  @if (_iota-is-map($sizes) == true) {
    @include _iota-spacing-property(map-get($sizes, null), $suffix, $props...);

    $sizes: map-remove($sizes, null);

    @each $breakpoint, $size in $sizes {
      @include _iota-breakpoint($breakpoint) {
        @include _iota-spacing-property($size, $suffix, $props...);
      }
    }

    @if ($spacing-responsive == true) {
      @include _iota-spacing-property(map-get($sizes, null), $suffix, $props...);
      $sizes: map-remove($sizes, null);

      $breakpoints-temp         : _iota-equalize-map($spacing-breakpoints, $sizes);
      $spacing-breakpoints-temp : _iota-equalize-map($sizes, $spacing-breakpoints);

      @each $breakpoint-name, $breakpoint-size in $breakpoints-temp {
        @each $spacing-breakpoint-name, $spacing-breakpoint-size in $spacing-breakpoints-temp {
          $breakpoint-index         : _iota-map-index($breakpoints-temp, $breakpoint-name);
          $spacing-breakpoint-index : _iota-map-index($spacing-breakpoints-temp, $spacing-breakpoint-name);

          @if ($spacing-breakpoint-index >= $breakpoint-index) {
            @include _iota-breakpoint($spacing-breakpoint-name) {
              @include _iota-spacing-property($spacing-breakpoint-size, if($suffix, $suffix, '') + _iota-cast-breakpoint($breakpoint-name), $props...);
            }
          }
        }
      }
    }
  }
}
